# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="changeme"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Registers the request handler
# ~~~~~
#play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
#play.http.filters = "utils.Filters"

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.BaseModule"
play.modules.enabled += "modules.JobModule"
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# The asset configuration
# ~~~~~
play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

# Play mailer
play.mailer {
  host = "localhost"
  port = 25
  mock = true
}

# Security Filter Configuration - Content Security Policy
#play.filters.headers {
#  contentSecurityPolicy = "default-src 'self';"
#  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
#  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
#  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
#  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' cdnjs.cloudflare.com;"
#  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
#}

#play.filters.disabled += "play.filters.headers.SecurityHeadersFilter"
#play.filters.headers.contentSecurityPolicy = "default-src 'self'; img-src 'self' https://my.img.cdn.com"
#play.filters.headers.contentSecurityPolicy = "default-src 'self'; style-src 'self' 'unsafe-inline'"

play.filters.hosts {
  allowed = ["."]
}

play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

include "silhouette.conf"

slick.dbs.default.driver = "slick.driver.MySQLDriver$"
slick.dbs.default.db.driver = "com.mysql.jdbc.Driver"
slick.dbs.default.db.connectionPool = "disabled"
slick.dbs.default.db.url = "jdbc:mysql://localhost/biblioteka?autoReconnect=true&useSSL=false"
slick.dbs.default.db.user = "root"
slick.dbs.default.db.password = "password"
play.evolutions.autoApply=true
play.filters.enabled += "play.filters.csrf.CSRFFilter"
play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.cors {
  pathPrefixes = ["/"]
  allowedOrigins = null
  allowedHttpMethods = ["GET", "POST", "OPTIONS"]
  exposedHeaders = ["Access-Control-Allow-Origin"]
  allowedHttpHeaders = null
  preflightMaxAge = 3 days
}

# Session configuration
session = {

  # The cookie name
  cookieName = "PLAY_SESSION"

  # Whether the secure attribute of the cookie should be set to true
  secure = false

  # The max age to set on the cookie.
  # If null, the cookie expires when the user closes their browser.
  # An important thing to note, this only sets when the browser will discard the cookie.
  maxAge = null

  # Whether the HTTP only attribute of the cookie should be set to true
  httpOnly = true

  # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
  sameSite = "lax"

  # The domain to set on the session cookie
  # If null, does not set a domain on the session cookie.
  domain = null

  # The session path
  # Must start with /.
  path = ${play.http.context}

  jwt {
    # The JWT signature algorithm to use on the session cookie
    # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
    signatureAlgorithm = "HS256"

    # The time after which the session is automatically invalidated.
    # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
    expiresAfter = ${play.http.session.maxAge}

    # The amount of clock skew to accept between servers when performing date checks
    # If you have NTP or roughtime synchronizing between servers, you can enhance
    # security by tightening this value.
    clockSkew = 5 minutes

    # The claim key under which all user data is stored in the JWT.
    dataClaim = "data"
  }
}
